#include <bits/stdc++.h>
using namespace std;

struct Kosaraju {
    int n;
    vector<vector<int>> g, rg;
    vector<int> comp, order, vis;

    explicit Kosaraju(int n) : n(n), g(n), rg(n), comp(n, -1), vis(n, 0) {}

    void add_edge(int u, int v) {
        g[u].push_back(v);
        rg[v].push_back(u);
    }

    void dfs1(int v) {
        vis[v] = 1;
        for (int u : g[v])
            if (!vis[u]) dfs1(u);
        order.push_back(v);
    }

    void dfs2(int v, int cid) {
        comp[v] = cid;
        for (int u : rg[v])
            if (comp[u] == -1) dfs2(u, cid);
    }

    vector<vector<int>> get_scc() {
        for (int i = 0; i < n; i++)
            if (!vis[i]) dfs1(i);
        reverse(order.begin(), order.end());
        int cid = 0;
        for (int v : order)
            if (comp[v] == -1) dfs2(v, cid++);
        vector<vector<int>> scc(cid);
        for (int i = 0; i < n; i++) scc[comp[i]].push_back(i);
        return scc;
    }
};

struct Tarjan {
    int n, timer, scc_count;
    vector<vector<int>> g;
    vector<int> disc, low, in_stack, comp;
    stack<int> st;

    explicit Tarjan(int n) : n(n), timer(0), scc_count(0), g(n), disc(n, -1), low(n, -1), in_stack(n, 0), comp(n, -1) {}

    void add_edge(int u, int v) {
        g[u].push_back(v);
    }

    void dfs(int u) {
        disc[u] = low[u] = timer++;
        st.push(u);
        in_stack[u] = 1;

        for (int v : g[u]) {
            if (disc[v] == -1) {
                dfs(v);
                low[u] = min(low[u], low[v]);
            } else if (in_stack[v]) {
                low[u] = min(low[u], disc[v]);
            }
        }

        if (low[u] == disc[u]) {
            while (true) {
                int v = st.top(); st.pop();
                in_stack[v] = 0;
                comp[v] = scc_count;
                if (v == u) break;
            }
            scc_count++;
        }
    }

    vector<vector<int>> get_scc() {
        for (int i = 0; i < n; i++)
            if (disc[i] == -1) dfs(i);
        vector<vector<int>> scc(scc_count);
        for (int i = 0; i < n; i++) scc[comp[i]].push_back(i);
        return scc;
    }
};

int main() {

    int n = 6;
    Kosaraju kosaraju(n);
    Tarjan tarjan(n);

    /*   ________________
        |    __________  |
        |    3 -> 4 -> 5-^
        |    |
        0 -> 1 -> 2
        |_________|

    */
    kosaraju.add_edge(0, 1); tarjan.add_edge(0, 1);
    kosaraju.add_edge(1, 2); tarjan.add_edge(1, 2);
    kosaraju.add_edge(2, 0); tarjan.add_edge(2, 0);
    kosaraju.add_edge(1, 3); tarjan.add_edge(1, 3);
    kosaraju.add_edge(3, 4); tarjan.add_edge(3, 4);
    kosaraju.add_edge(4, 5); tarjan.add_edge(4, 5);
    kosaraju.add_edge(5, 3); tarjan.add_edge(5, 3);
    // kosaraju.add_edge(5, 0); tarjan.add_edge(5, 0);


    // kosaraju.add_edge(4, 2); tarjan.add_edge(4, 2);

    auto scc_kos = kosaraju.get_scc();
    auto scc_tar = tarjan.get_scc();

    cout << "Kosaraju SCCs:\n";
    for (const auto &comp : scc_kos) {
        for (int v : comp) cout << v << " ";
        cout << "\n";
    }

    cout << "Tarjan SCCs:\n";
    for (const auto &comp : scc_tar) {
        for (int v : comp) cout << v << " ";
        cout << "\n";
    }
}
